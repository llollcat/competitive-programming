/*ограничение по времени на тест
1 секунда
ограничение по памяти на тест
256 мегабайт
ввод
стандартный ввод
вывод
стандартный вывод

Перед домом Поликарпа находится забор, который состоит из n одинаковых по ширине досок, расположенных одна за другой слева направо. Высота i-ой доски составляет hi метров, разные доски могут иметь различные высоты.
Забор для n = 7 и h = [1, 2, 6, 1, 1, 7, 1]

Поликарп приобрел рояль и теперь ищет наилучший способ занести рояль в свой дом. Для того, чтобы осуществить задуманное, ему придется выломать ровно k подряд идущих досок в заборе. Так как высокие доски выламывать сложнее, Поликарп хочет найти такие k последовательных досок, что сумма их высот минимальна.

Напишите программу, которая найдет номера k последовательных досок с наименьшей суммой высот. Обратите внимание, забор не окружает дом Поликарпа, а находится перед ним (другими словами, забор не зациклен).
Входные данные

В первой строке входных данных содержатся целые числа n и k (1 ≤ n ≤ 1.5·105, 1 ≤ k ≤ n) — количество досок в заборе и ширина проема для рояля. Вторая строка содержит последовательность целых чисел h1, h2, ..., hn (1 ≤ hi ≤ 100), где hi — высота i-ой доски забора.
Выходные данные

Выведите такое j, что сумма высот досок j, j + 1, ..., j + k - 1 — наименьшая возможная. Если таких j несколько, то выведите любое из них.
Примеры
Входные данные
Скопировать

7 3
1 2 6 1 1 7 1

Выходные данные
Скопировать

3

Примечание

В примере требуется найти три последовательные доски с минимальной суммой высот. В данном случае три доски с номерами 3, 4 и 5 обладают требуемым свойством и имеют суммарную высоту 8.
*/
#include <bits/stdc++.h>

using namespace std;


int main() {



    long long n; cin >> n;
    long long k; cin >> k;

    queue<long long> q;

    long long sum =0;
    long long m_sum = LONG_LONG_MAX;
    long long out;
    for (long long i =0; i<n; ++i){
        long long input; cin >> input;

        sum+=input;
        q.push(input);

        if (i>=k-1){
            if (m_sum>sum){
                m_sum=sum;
                out=i-k+2;

            }
            sum -= q.front();
            q.pop();

        }




    }

    cout << out;


    return 0;
}
