/*ограничение по времени на тест
1 секунда
ограничение по памяти на тест
256 мегабайт
ввод
стандартный ввод
вывод
стандартный вывод

Ваня идет поздней ночью по прямолинейной улице длины l, которая освещается n фонарями. Введём систему координат, в которой начало улицы соответствует точке 0, а её конец — точке l. Тогда i-й фонарь находится в точке ai. Фонарь освещает все точки улицы, которые находятся от него на расстоянии не больше d, где d — некоторое положительное число, общее для всех фонарей.

Ваня хочет узнать, какой минимальный радиус освещения d должен быть у фонарей, чтобы вся улица была освещена.
Входные данные

В первой строке записаны два целых числа n, l (1 ≤ n ≤ 1000, 1 ≤ l ≤ 109) — количество фонарей и длина улицы соответственно.

В следующей строке записано n целых чисел ai (0 ≤ ai ≤ l). Несколько фонарей могут находиться в одной точке. Фонари могут находиться в концах улицы.
Выходные данные

Выведите минимальный радиус освещения d, который необходим, чтобы осветить всю улицу. Ответ будет считаться правильным, если его абсолютная или относительная погрешность не превышает 10 - 9
Примеры
Входные данные
Скопировать

7 15
15 5 3 7 9 14 0

Выходные данные
Скопировать

2.5000000000

Входные данные
Скопировать

2 5
2 5

Выходные данные
Скопировать

2.0000000000

Примечание

Рассмотрим второй пример. При d = 2 первый фонарь будет освещать отрезок [0, 4] улицы, а второй — отрезок [3, 5]. Таким образом, вся улица будет освещена.
*/

#include <bits/stdc++.h>

using namespace std;


int main() {

    int n;
    cin >> n;

     double lights[1002];

     double l;
    cin >> l;

    for (int i =0; i<n; ++i){
        cin >> lights[i];
    }

    stable_sort(lights, lights+n);


     double out=max(lights[0], l-lights[n-1]);
    for (int i =1; i<n; ++i){
        if ((lights[i]-lights[i-1])/2>out){
            out = (lights[i]-lights[i-1])/2;
        }

    }
    cout <<std::fixed<< out;

    return 0;
}
