/*
ограничение по времени на тест
1 секунда
ограничение по памяти на тест
256 мегабайт
ввод
стандартный ввод
вывод
стандартный вывод

В автобусе 2n рядов сидений. n рядов находятся с левой стороны и n рядов — с правой. В каждом ряду могут сидеть по два человека. Таким образом, общая вместительность автобуса равна 4n.

Рассмотрим рассадку m (m ≤ 4n) пассажиров в автобусе. Пассажиры заходят в автобус по одному и пронумерованы целыми числами от 1 до m (в порядке того как они заходят в автобус). При этом рассадка выглядит следующим образом:

1-й ряд слева у окна, 1-й ряд справа у окна, 2-й ряд слева у окна, 2-й ряд справа у окна, ... , n-й ряд слева у окна, n-й ряд справа у окна.

После того, как все места у окон закончатся (при m > 2n) пассажиры занимают места не у окон:

1-й ряд слева не у окна, 1-й ряд справа не у окна, 2-й ряд слева не у окна, 2-й ряд справа не у окна, ... , n-й ряд слева не у окна, n-й ряд справа не у окна.

Все пассажиры едут в одно место назначения. Пассажиры в конечной точке выходят из автобуса в следующем порядке:

1-й ряд слева не у окна, 1-й ряд слева у окна, 1-й ряд справа не у окна, 1-й ряд справа у окна, ... , n-й ряд слева не у окна, n-й ряд слева у окна, n-й ряд справа не у окна, n-й ряд справа у окна.
Рассадка при n = 9 и m = 36.

Вам заданы значения n и m. Выведите m чисел от 1 до m — порядок в котором пассажиры будут выходить из автобуса.
Входные данные

В единственной строке находится пара целых чисел n и m (1 ≤ n ≤ 100, 1 ≤ m ≤ 4n) — количество пар рядов и количество пассажиров автобуса.
Выходные данные

Выведите m различных целых чисел от 1 до m — порядок в котором пассажиры будут выходить из автобуса.
Примеры
Входные данные
Скопировать

2 7

Выходные данные
Скопировать

5 1 6 2 7 3 4

Входные данные
Скопировать

9 36

Выходные данные
Скопировать

19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18


*/















#include <bits/stdc++.h>

using namespace std;


int main() {
    int n, m;
    cin >> n >>m;

    int all_cntr=0, win_c=0, nwin_c=n*2;
    for (int i =0; i<n*2; ++i){

        if (all_cntr>4*n)
            break;
        if (nwin_c<m) {
            ++nwin_c;
            cout << nwin_c << " ";

            ++all_cntr;
        }

        if (all_cntr>=m)
            break;
        ++win_c;
        cout << win_c << " ";

        ++all_cntr;






    }

    return 0;
} 
